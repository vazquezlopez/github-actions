# This is a basic workflow to help you get started with Actions
name: Deploy to Apigee X

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
env:
  # Setting an environment variable with the value of a configuration variable
  env_var: "prod"
  
# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    permissions:
      contents: 'read'
      id-token: 'write'
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v4

      # Runs a single command using the runners shell
      - name: Use variables
        run: |
          echo "env variable : $APIGEE_ENV"
          echo "organization variable : $APIGEE_ORG"
          echo "PROXY NAME: $APIGEE_PROXY_NAME"
          echo "variable from shell environment : $env_var"
        env:
          APIGEE_ENV: ${{ env.APIGEE_ENV }}
          APIGEE_ORG: ${{ env.APIGEE_ORG }}
          APIGEE_PROXY_NAME: ${{ env.APIGEE_PROXY_NAME }}
        
      - name: auth with Google
        id: auth
        uses: 'google-github-actions/auth@v2'
        with:
          token_format: "access_token"
          create_credentials_file: true
          workload_identity_provider: ${{ secrets.WORKLOAD_IDENTITY_POOL_ID }}
          service_account: ${{ secrets.SERVICE_ACCOUNT }}
      - name: Create API bundle
        run: zip -r proxy.zip apiproxy
      - name: Set output
        id: val
        run: echo "output=${{ vars.APIGEE_ORG }}" >> $GITHUB_OUTPUT
      - name: Print my output
        run: echo ${{steps.val.outputs.name}}
      - name: Upload API Proxy Bundle
        id: upload
        run: "echo \"apigee-revision=$(curl --fail -X POST -H \"Content-Type: multipart/form-data\" -H \"Authorization: Bearer ${{steps.auth.outputs.access_token}}\" -F \"file=@proxy.zip\" \"https://apigee.googleapis.com/v1/organizations/${{vars.APIGEE_ORG}}/apis?action=import&name=${{vars.APIGEE_PROXY_NAME}}\" --silent | jq --raw-output .revision)\" >> $GITHUB_OUTPUT"
      - name: Deploy Revision
        run: "curl \"https://apigee.googleapis.com/v1/organizations/${{ vars.APIGEE_ORG }}/environments/${{ vars.APIGEE_ENV }}/apis/${{vars.APIGEE_PROXY_NAME}}/revisions/${{steps.upload.outputs.apigee-revision}}/deployments?override=true\" -X POST -H \"Authorization: Bearer ${{steps.auth.outputs.access_token}}\""
      - name: Check Revision
        run: "curl \"https://apigee.googleapis.com/v1/organizations/${{ vars.APIGEE_ORG }}/environments/${{ vars.APIGEE_ENV }}/apis/${{vars.APIGEE_PROXY_NAME}}/revisions/${{steps.upload.outputs.apigee-revision}}/deployments\" -H \"Authorization: Bearer ${{steps.auth.outputs.access_token}}\""
      - name: Loop
        run: |
          for i in 1 2 3 4 5 6 7 8 9 10
          do
            echo "Revision of API Proxy ${{steps.upload.outputs.apigee-revision}}"
            echo "Iterate to check revision: $i"
            response=$(curl -H "Authorization: Bearer ${{steps.auth.outputs.access_token}}" https://apigee.googleapis.com/v1/organizations/${{ vars.APIGEE_ORG }}/environments/${{ vars.APIGEE_ENV }}/apis/${{vars.APIGEE_PROXY_NAME}}/revisions/${{steps.upload.outputs.apigee-revision}}/deployments --silent | jq --raw-output .state )
            echo $response
            if [ $response == 'PROGRESSING' ]; then
              echo "Continue pulling"
              sleep 10
            elif [ $response == 'READY' ]; then
              echo "The API Proxy is ready"
              exit 0
            else
              echo "This is an unknown event"
            fi
          done
